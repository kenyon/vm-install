#!/usr/bin/env ruby
# -*- coding: utf-8 -*-
# SPDX-License-Identifier: GPL-3.0-or-later

# Automated virt-install(1) frontend.
#
# Copyright © 2019 Kenyon Ralph
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

# Semantic Versioning. https://semver.org/
version = '0.0.0'

require 'erb'
require 'fileutils'
require 'optparse'
require 'ostruct'
require 'yaml'

DEFAULT_CFG_FILE = 'vm-install.yaml'.freeze

options = OpenStruct.new

OptionParser.new do |opts|
  opts.version = version
  opts.banner = "Usage: #{opts.program_name} [options] PRESET
Install a new virtual machine (using virt-install(1)).\n\n"

  opts.on(
    '-nNAME',
    '--name=NAME',
    'Name to call the new VM; default: same as PRESET'
  ) do |n|
    options.name = n
  end

  opts.on(
    '-cCONFIG',
    '--config=CONFIG',
    "config file to use; default: #{DEFAULT_CFG_FILE} in the current directory"
  ) do |c|
    options.cfg_file = c
  end

  opts.on(
    '-h',
    '--help',
    'Show this help and exit'
  ) do
    puts opts
    exit
  end

  opts.on(
    '-V',
    '--version',
    'Output version information and exit'
  ) do
    puts "#{opts.program_name} #{opts.version}"
    puts "Copyright © 2019 Kenyon Ralph
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Written by Kenyon Ralph."
    exit
  end
end.parse!

cfg_file = options.cfg_file.nil? ? DEFAULT_CFG_FILE : options.cfg_file
config = Psych.load_file(cfg_file)

options.preset = ARGV[0]
raise(ArgumentError, 'Preset not specified; see --help') if options.preset.nil?

config[options.preset].nil? && raise(ArgumentError, 'Preset "' + options.preset + '" not found in ' + cfg_file)

options.name = options.preset if options.name.nil?

vm_install_options = config.delete('vm-install-options')
vm_install_preset_options = config[options.preset].delete('vm-install-preset-options')

vm_install_options['templates'].each do |template|
  File.open(template.split('.erb')[0], 'w') do |file|
    file.puts(ERB.new(File.read(template)).result)
  end
end

# Create the Ubuntu Server autoinstall ISO.
FileUtils.touch('meta-data')
FileUtils.rm('cidata.iso', force: true)
system('cloud-localds cidata.iso user-data meta-data')

cmd = 'virt-install --name ' + options.name

config[options.preset].each_pair do |opt, arg|
  case opt.length == 1
  when true
    cmd += " -#{opt} #{arg}"
  when false
    cmd += " --#{opt} #{arg}"
  end
end

system(cmd)
